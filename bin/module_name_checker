#!/usr/bin/env ruby
# -*- ruby -*-

# $DEBUG = 1

######################################################################

module Enf

class ModuleNameChecker
  class Error < ::Exception; end

  EMPTY_String = ''.freeze
  EMPTY_Hash = { }.freeze
  EMPTY_Array = [ ].freeze

  @@core_modules = [ ]
  @@core_modules_by_name = { }
  ObjectSpace.each_object(::Module) do | obj |
    if (name = obj.name) && ! name.empty? && name !~ /^Enf(:|$)/
      @@core_modules_by_name[name] = obj
    end
  end
  @@core_modules = @@core_modules_by_name.values.sort_by{|x| x.name}

  @@lib_paths = $:
  @@std_paths = eval(`RUBYLIB= ruby -e 'puts $:.inspect'`)

  attr_accessor :lib_paths, :std_paths, :skip_paths, :other_paths, :paths
  attr_accessor :core_modules
  attr_reader :all_files, :all_required

  def initialize opts = nil
    @args = ARGV
    @all_files = [ ]
    @all_required = { }
    @other_paths = [ ]
    @exceptions = [ ]
    @skip_paths = [ ]
    @debug ||= 0
    @pause ||= 0
    (opts || EMPTY_Hash).each do | k, v |
      send(:"#{k}=", v)
    end
    @args = @args.map{|x| x.dup}
  end

  def lib_paths
    @lib_paths ||= @@lib_paths.dup
  end

  def std_paths
    @std_paths ||= @@std_paths.dup
  end

  def core_modules
    @core_modules ||= @@core_modules.dup
  end

  def core_modules_by_name
    @core_modules_by_name ||= @@core_modules_by_name.dup
  end

  def parse_args!
    args = @args.dup
    until args.empty?
      arg = args.shift
      # $stderr.puts "  arg = #{arg.inspect}"
      case arg
      when /^--?d/
        @debug += 1
      when /^--?p/
        @pause += 1
      when /^--?(sp|skip-path)/
        arg = args.shift
        @skip_paths.push(*arg.split(/\s+|\s*,\s*/))
      when /^--?(paths)/
        until args.empty?
          arg = args.shift
          # $stderr.puts "    paths arg = #{arg.inspect}"
          case arg
          when /^-/
            args.unshift arg
            break
          else
            other_paths.push(*arg.split(/\s+|\s*,\s*/))
          end
        end
      when /^--?/
        raise Error, "unknown option #{arg}"
      else
        other_paths << arg
      end
    end

    if @debug + @pause > 0
      gem 'ruby-debug'
      require 'ruby-debug'
    end

    self
  end

  def locate_files!
    @paths = lib_paths - 
      (std_paths - [ '.' ]) + 
      other_paths

    skip_paths = 
      @skip_paths.map{|p| FilePattern.new p} +
      @skip_paths.map{|p| FilePattern.new(File.expand_path(p))}
    @paths.delete_if{|p| skip_paths.any?{|sp| sp === p}}

    puts "lib_paths = #{lib_paths.inspect}"
    puts "std_paths = #{std_paths.inspect}"
    puts "other_paths = #{other_paths.inspect}"
    puts "skip_paths = #{skip_paths.inspect}"
    puts "paths = #{@paths.inspect}"
    puts "core_modules = #{core_modules.inspect}"

    # exit 0

    @paths.each do | dir |
      dir_rx = %r{\A#{dir}/}
      files = Dir["#{dir}/**/*.rb"].sort
      # puts "dir = #{dir.inspect}"
      # puts "files = #{PP.pp(files, '')}"
      files.each do | file |
        rel_path = file
        # puts "  file = #{file.inspect}"    
        file.sub!(dir_rx, '')
        # puts "  file = #{file.inspect}"
        next if all_required[file]
        f_d = { 
          :file => file, 
          :dir => dir, 
          :rel_path => rel_path,
          :abs_path => File.expand_path(file, dir),
        }
        all_required[file] = f_d
        all_files << f_d
      end
    end
    all_files.sort! { | a, b | a[:abs_path] <=> b[:abs_path] }
    self
  end
  
  def check_files!
    pass_0!
    pass_1!
    pass_2!
    output!
    self
  end

  def pass_0!
    do_all_files! :pass_0! do | f |
      f[:namespaces] = [ ]

      parser = RubyParser.new
      parser.file = f[:file]
      
      sexp = parser.parse(File.read(f[:abs_path]))
      
      nss = AstScanner.new
      nss.core_modules = @@core_modules
      
      nss.s_unit! sexp
      
      namespaces = f[:namespaces] = nss.namespaces
      
      namespaces.each do | ns |
        parents = [ ]
        x = ns[:parent]
        while x
          parents << x
          x = x[:parent]
        end
        ns[:parents] = parents
      end
    end
  end

  def pass_1!
    do_all_files! :pass_1! do | f |
      # pp nss
      first_namespace = prev_namespace = nil
      f[:namespaces].each do | ns |
        if core_modules_by_name[ns[:name]]
          mp = ns[:name_path].dup
          last = mp.pop
          last = :"Mixin#{last}"
          mp.push last
          if mp.size == 1 
            if other_ns = prev_namespace || first_namespace
              mp.unshift other_ns[:name_path]
              mp.flatten!
            else
              mp.unshift :SOMETHING
            end
          end
          ns[:suggest_type] = :module
          ns[:suggest_name] = mp * "::"
          ns[:suggest_mixin] = ns[:suggest_name]
          suggest ns, "Create a mixin named #{ns[:suggest_name]} for patch to #{ns[:type]} #{ns[:name]}."
        else
          first_namespace ||= ns
          prev_namespace = ns
        end
        
        type = ns[:suggest_type] || ns[:type]
        name = ns[:suggest_name] || ns[:name]
        ns[:suggest_file] = 
          name.
          split('::').
          map { | e | underscore(e) } * '/' + '.rb'
        
        if ns[:suggest_file] != f[:file]
          ns[:unexpected_file] = true
        end
      end
    end
  end

  def pass_2!
    do_all_files! :pass_2! do | f |
      if f[:namespaces].empty?
        suggest f, "This file is not a candidate for autoloading: no modules or classes."
      end
      f[:namespaces].each do | ns |
        type = ns[:suggest_type] || ns[:type]
        name = ns[:suggest_name] || ns[:name]
        
        if ns[:unexpected_file]
          if rf = all_required[ns[:suggest_file]]
            if rf[:namespaces].find { | x | x[:name] == name }
              ok ns, "The file #{rf[:abs_path]} appears to define #{type} #{name}."
            else
              suggest rf, "Verify the file #{rf[:abs_path]} defines #{type} #{name}."
            end
          else
            if ns[:parents].any?{|p| ! p[:unexpected_file]}
              suggest ns, "Create file for #{type} #{name} named #{f[:dir]}/./#{ns[:suggest_file].inspect}."
            end
          end
        end
      end
    end
  end
  
  def output!
    do_all_files! :output!, :prefix => ("=" * 70) do | f |
      puts "  #{f[:abs_path]}"
      puts "  #{(f[:notes] || EMPTY_Array) * "\n  "}"
      f[:namespaces].each do | ns |
        puts "  #{ns[:type]} #{ns[:name]} (line #{ns[:lines]}):\n    #{(ns[:notes] || EMPTY_Array) * "\n    "}"
      end
    end
  end


  def do_all_files! pass, opts = EMPTY_Hash
    all_files.each do | f |
      if x = opts[:prefix]; puts x; end
      puts "#{pass} #{f[:rel_path]}"
      # pp sexp
      begin
        yield f
      rescue Exception => exc
        exc = { :pass => pass, :inspect => exc.inspect, :backtrace => exc.backtrace }
        (f[:exceptions] ||= [ ]) << exc
        @exceptions << [ pass, exc ]
        puts "ERROR #{exc[:inspect]}\n  #{exc[:backtrace] * "\n  "}"
        debugger if @debug > 0
      end

      if @pause > 0
        $stderr.write "\n  press ENTER: "
        $stdin.readline
      end
    end
    self
  end

  def suggest ns, msg
    note :suggest, ns, msg
  end

  def ok ns, msg
    note :ok, ns, msg
  end

  def note kind, ns, msg, once = true
    msg = "#{kind}: #{msg}"
    notes = (ns[:notes] ||= [ ])
    return if once && notes.include?(msg)  
    notes << msg
    puts "  #{msg}"
    ns
  end

  # stolen from activesupport 3.0.1
  def underscore(camel_cased_word)
    word = camel_cased_word.to_s.dup
    word.gsub!(/::/, '/')
    word.gsub!(/([A-Z]+)([A-Z][a-z])/,'\1_\2')
    word.gsub!(/([a-z\d])([A-Z])/,'\1_\2')
    word.tr!("-", "_")
    word.downcase!
    word
  end
  
  def report!
    file = "#{File.basename(__FILE__)}.report.yml"
    puts "writing #{file}"
    File.open(file, "w+") do | o |
      o.puts all_files.to_yaml
    end
    self
  end

  def done!
    exit(@exceptions.empty? ? 0 : 1)
  end

  class FilePattern
    attr_reader :str

    def initialize str
      @str = str
    end

    def === x
      rx === x.to_s
    end

    def rx
      @rx ||=
        begin
          x = "\\A"
          x <<
            @str.
            gsub(/\*\*/, "\001").
            gsub(/\*/, "\002").
            gsub(/\001/, ".*").
            gsub(/\002/, "[^/]*")
          x << "\\Z"
          Regexp.new(x)
        end
    end
  end

  class AstScanner
    module MyModule
    end
    
    attr_accessor :core_modules
    attr_reader :namespaces

    def initialize opts = nil
      @debug = 0
      @namespaces = [ ]
      @namespace = nil
      @namespace_path = [ ]
      @namespace_stack = [ ]
      (opts || EMPTY_Hash).each do | k, v |
        send(:"#{k}=", v)
      end
    end
    
    def s_unit! e
      return unless e
      case e.sexp_type
      when :block, :scope
        s_body! e.sexp_body
      when :class, :module
        s_class_or_module! e
      end
    end

    def s_body! es
      es.each do | e |
        next unless Sexp === e
        case e.sexp_type
        when :scope, :block
          s_body! e.sexp_body
        when :if, :unless
          s_condition! e
        else
          s_class_or_module! e
        end
      end
    end
    
    def s_condition! e
      # skip over test to truth and consequence.
      s_body! e.sexp_body.sexp_body
    end

    def s_class_or_module! e
      case e.sexp_type
      when :class
        s_class! e
      when :module
        s_module! e
      end
    end
    
    def s_class! e
      s_namespace!(:class, e) do | e |
        # skip superclass expr.
        s_namespace_body! e.sexp_body.sexp_body
      end
    end
    
    def s_module! e
      s_namespace!(:module, e) do | e |
        s_namespace_body! e.sexp_body
      end
    end
    
    def s_namespace! type, e
      debugger if @debug > 0
      @namespace_stack.push [ @namespace, @namespace_path ]

      @namespace_path, top_level = s_name(e[1])

      @namespace = {
        :lines => [ e.line, nil ],
        :type => type, 
        :name_path => @namespace_path,
        :name => @namespace_path * "::", 
        :top_level => top_level, 
        :parent => @namespace,
      }

      @namespaces << @namespace

      yield e.sexp_body

    ensure
      @namespace, @namespace_path = @namespace_stack.pop
    end
    
    def s_name e
=begin
      unless Symbol === e
        pp [ :e=, e ]
        debugger if $DEBUG
      end
=end

      path = @namespace_path.dup
      @top_level = false

      s_name_1 e, path

      [ path, @top_level ]
    end

    def s_name_1 e, path
      case e
      when Sexp
        case e.sexp_type
        when :colon3
          @top_level = true
          path.clear
          path.push e[1]
          name = nil
        when :colon2
          s_name_1 e[1], path
          s_name_1 e[2], path
        when :const
          path << e[1]
        else
          raise "cannot handle #{e.inspect}"
        end
      when Symbol
        path << e
      else
        raise "cannot handle #{e.inspect}"
      end
      path
    end

    def s_namespace_body! es
      if false && [ "Enf", "NamespaceScanner" ].include?(@namespace[1])
        pp [ @namespace, es ]
        debugger if $DEBUG 
      end
      s_body! es
    end
  end
end
end # module

######################################################################

require 'pp'
require 'rubygems'
gem 'ruby_parser'; require 'ruby_parser'

######################################################################

Enf::ModuleNameChecker.new().
  parse_args!.
  locate_files!.
  check_files!.
  report!.
  done!

